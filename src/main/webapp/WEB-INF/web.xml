<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
		 http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

	<!-- Web context parameters section -->
	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml,/WEB-INF/spring/security-context.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Usefull to inject (even in a singleton scoped bean), the HttpServletRequest request scoped bean -->
	<listener>
	    <listener-class>
	        org.springframework.web.context.request.RequestContextListener
	    </listener-class>
	</listener>
	
	<!-- Processes application requests -->
	<!-- Should be the first, Tomcat servlet container will forward to the spring dispatcher servler -->
	<!-- How filters works: http://otndnld.oracle.co.jp/document/products/as10g/101300/B25221_03/web.1013/b14426/filters.htm#BCFDIHEJ -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- Inject hibernate session in view (to avoid session closed and entities not accessible) -->
	<filter>
		<filter-name>SpringHibFilter</filter-name>
	   	<filter-class>
	          org.springframework.orm.hibernate4.support.OpenSessionInViewFilter
	 	</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>SpringHibFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- there is no authorization for invoking the MultipartFilter which means anyone can place temporary files on your server. -->
	<!-- should be before springSecurityFilterChain-->
	<filter>
		<filter-name>MultipartFilter</filter-name>
		<filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>MultipartFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- For improving security, cors should only be allowed to the same origin -->
	<!-- Par défaut les requêtes simples (même withCredentials) sont acceptées par les serveurs sans filtre spécifique, -->
	<!-- La sécurité se situe au niveau du navigateur qui vérifie si le Acess-Control-Allow-Origin header est positionné (non par défaut) -->
	<!-- Cependant une première requête non préflight peut être executée sur le serveur si la conf CORS sur ce dernier n'est pas explicite. -->
	<!-- http://tomcat.apache.org/tomcat-8.0-doc/images/cors-flowchart.png -->
	<filter>
		<filter-name>CorsFilter</filter-name>
		<filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
		<init-param>
		    <param-name>cors.allowed.origins</param-name>
		    <param-value>http://localhost</param-value>
		  </init-param>
	</filter>
	<filter-mapping>
		<filter-name>CorsFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- intercepting requests for spring security -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
</web-app>
